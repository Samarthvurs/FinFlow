import csv
from collections import defaultdict
from datetime import datetime
import joblib
import pandas as pd

# --- Load CSV Transactions ---
def load_transactions_from_csv(filename):
    transactions = []
    with open(filename, 'r') as file:
        reader = csv.DictReader(file)
        for row in reader:
            transactions.append({
                "id": row["id"],
                "amount": float(row["amount"]),
                "method": row["method"],
                "description": row["description"],
                "created_at": row["created_at"]
            })
    return transactions

# --- Analyze Transactions ---
def analyze_transactions(transactions, monthly_budget=5000):
    total_spent = 0
    spend_by_method = defaultdict(float)
    swiggy_orders = 0

    for txn in transactions:
        amount = txn["amount"]
        method = txn["method"]
        desc = txn["description"].lower()
        date_str = txn["created_at"]

        total_spent += amount
        spend_by_method[method] += amount

        if "swiggy" in desc:
            swiggy_orders += 1

    print(f"\n🔔 Total Spent: ₹{total_spent:.2f}")
    if total_spent > monthly_budget:
        print("🚨 Budget exceeded!")

    print("\n💳 Spending by method:")
    for method, amt in spend_by_method.items():
        print(f"  - {method}: ₹{amt:.2f}")

    print(f"\n🍔 Swiggy Orders: {swiggy_orders}")

# --- Predict Smart Budget Limits ---
def predict_limits(income):
    categories = ['Food', 'Transport', 'Shopping', 'Utilities', 'Entertainment']
    model = joblib.load("limit_and_count_predictor.pkl")
    results = []

    for category in categories:
        data = {f'category_{cat}': [1 if cat == category else 0] for cat in categories}
        data['monthly_income'] = [income]
        input_df = pd.DataFrame(data)

        ordered_columns = [f'category_{cat}' for cat in sorted(categories)] + ['monthly_income']
        input_df = input_df.reindex(columns=ordered_columns, fill_value=0)

        prediction = model.predict(input_df)[0]
        results.append((category, prediction[0], prediction[1]))

    return results

# --- Main Runner ---
if __name__ == "__main__":
    filename = "file.csv"
    transactions = load_transactions_from_csv(filename)
    analyze_transactions(transactions, monthly_budget=5000)

    try:
        income = int(input("\n💬 Enter your monthly income in ₹: "))
        predictions = predict_limits(income)

        print(f"\n💡 Smart Spending Predictions for ₹{income} per month:")
        for category, limit, count in predictions:
            print(f"📂 {category:13} → Monthly Limit: ₹{limit:.2f} | ~{round(count)} transactions")

    except ValueError:
        print("❌ Invalid input. Please enter a valid number.")